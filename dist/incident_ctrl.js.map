{"version":3,"sources":["../src/incident_ctrl.js"],"names":["moment","angular","$","_","kbn","config","MetricsPanelCtrl","IncidentCtrl","$scope","$injector","panelDefaults","legend","show","values","width","height","fontSize","fontWeight","font","family","statData","message","json","rRate","activeInc","activeInc1","activeInc2","activeInc3","activeInc3c","refreshRate","text","title","name","subText","defaults","panel","events","on","onInitEditMode","bind","onDataReceived","render","dataList","parseData","self","foundInc","length","forEach","incident","status","convertedTime","Date","impactTime","incidentTitle","severity","lobs","join","incidentTime","toTimeString","incidentDate","getMonth","getDate","getFullYear","incidentBridge","incidentTicketNo","bridgeNumber","push","label","date","time","bridge","scope","elem","$panelContainer","find","bgColor","css","templateUrl"],"mappings":"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","file":"incident_ctrl.js","sourcesContent":["\nimport moment from 'moment';\nimport angular from 'angular';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\n\n\nexport class IncidentCtrl extends MetricsPanelCtrl {\n  constructor($scope,$injector){\n    super($scope,$injector);\n    const panelDefaults = {\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      width:100,\n      height:100,\n      fontSize: '25px',\n      fontWeight: '10px',\n      font: { family: 'Myriad Set Pro, Helvetica Neue, Helvetica, Arial, sans-serif' },\n      statData:{},\n      message:\"\",\n      json:[],\n      rRate:'5s',\n      activeInc:[],\n      activeInc1:[],\n      activeInc2:[],\n      activeInc3:[],\n      activeInc3c:[],\n      refreshRate:5000,\n      text:{\n        title:'',\n        name:'',\n        subText:''\n      }\n    }\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n    this.events.on('init-edit-mode',this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n  }\n  onInitEditMode() {\n    //this.addEditorTab('Options','public/plugins/grafana-incident-panel/editor.html',2);\n  }\n\n  onDataReceived(dataList) {\n    //receive data from hive datasource\n    this.panel.json = dataList;\n    this.parseData();\n    this.render();\n  }\n\n  parseData(){\n    //parse data and show info based on logic.\n    //status must be in progress, Sev must be 1,2,3 or 3c.\n    var self = this;\n    var foundInc = false;\n    self.panel.activeInc.length = 0;\n    self.panel.activeInc1.length = 0;\n    self.panel.activeInc2.length = 0;\n    self.panel.activeInc3.length = 0;\n    self.panel.activeInc3c.length = 0;\n    if(self.panel.json.length != 0){\n      self.panel.json.forEach(function(incident){\n        if(incident.status === \"In Progress\"){\n\n\n          var convertedTime = new Date(incident.impactTime);\n          var incidentTitle = \"Sev \" + incident.severity +\": \" + incident.title+\" affecting \" + incident.lobs.join();\n          var incidentTime = convertedTime.toTimeString();\n          var incidentDate = convertedTime.getMonth() + \"/\" + convertedTime.getDate() + \"/\" + convertedTime.getFullYear();\n          var incidentBridge = incident.incidentTicketNo + \" active on Bridge\" + incident.bridgeNumber;\n          if(incident.severity === \"1\"){\n              foundInc = true;\n            self.panel.activeInc1.push({label:incidentTitle,date:incidentDate,time:incidentTime,bridge:incidentBridge})\n\n          }\n          else if(incident.severity === \"2\"){\n              foundInc = true;\n            self.panel.activeInc2.push({label:incidentTitle,date:incidentDate,time:incidentTime,bridge:incidentBridge})\n          }\n          else if(incident.severity === \"3C\"){\n              foundInc = true;\n            self.panel.activeInc3c.push({label:incidentTitle,date:incidentDate,time:incidentTime,bridge:incidentBridge})\n          }\n          else if(incident.severity === \"3\"){\n              foundInc = true;\n            self.panel.activeInc3.push({label:incidentTitle,date:incidentDate,time:incidentTime,bridge:incidentBridge})\n          }\n        }\n      })\n      if(foundInc){\n\n        self.panel.activeInc.push(self.panel.activeInc1);\n        self.panel.activeInc.push(self.panel.activeInc2);\n        self.panel.activeInc.push(self.panel.activeInc3);\n        self.panel.activeInc.push(self.panel.activeInc3c);\n      } else {\n\n        self.panel.activeInc1.push({label:\"No Active Incidents\",date:\"N/A\",time:\"N/A\",bridge:\"N/A\"})\n        self.panel.activeInc.push(self.panel.activeInc1);\n      }\n    }\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n\n    });\n\n  }\n}\nIncidentCtrl.templateUrl = 'module.html';\n"]}